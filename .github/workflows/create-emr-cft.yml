name: Deploy EMR Cluster using CFT template

on:
  repository_dispatch:
    types: [create-emr-cft]

    inputs:
      stack-name:
        description: 'Name of stack'
        required: true
        type: string

      AWS_ACCESS_KEY_ID:
        description: 'AWS temp cred: Access Key Id'
        required: true
        type: string

      AWS_SECRET_ACCESS_KEY:
        description: 'AWS temp cred: Secret Access Key'
        required: true
        type: string

      AWS_SESSION_TOKEN:
        description: 'AWS temp cred: Session Token'
        required: true
        type: string

jobs:
  deployment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Checkout files
        run: |
          ls -l

      # - name: Set AWS credentials
      #   id: creds
      #   run: |
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #   shell: bash

      - name: Configure AWS credentials
        env:
          AWS_ACCESS_KEY_ID: ${{ github.event.client_payload.inputs.AWS_ACCESS_KEY_ID }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Boto3
        run: pip install boto3

      - name: Install Boto3
        run: pip install boto3
      
      - name: Check if S3 bucket exists
        id: check_bucket
        run: |
          bucket_name=luminex-application-files
          if aws s3api head-bucket --bucket $bucket_name 2>/dev/null; then
            echo "Bucket $bucket_name already exists."
            echo "::set-output name=bucket_exists::true"
          else
            echo "Bucket $bucket_name does not exist."
            echo "::set-output name=bucket_exists::false"
          fi

      - name: Create S3 bucket if it doesn't exist
        if: steps.check_bucket.outputs.bucket_exists == 'false'
        run: |
          bucket_name=luminex-application-files
          aws s3api create-bucket --bucket luminex-application-files --region ${{github.event.inputs.AWS_Region || 'us-east-1'}}

      - name: Check and Create 'scripts' folder
        run: |
          bucket_name=luminex-application-files
          folder_key=scripts/
          if aws s3api head-object --bucket $bucket_name --key $folder_key 2>/dev/null; then
            echo "Folder $folder_key already exists."
          else
            echo "Folder $folder_key does not exist. Creating..."
            aws s3api put-object --bucket $bucket_name --key $folder_key
          fi

      - name: Check and Create 'temp-etl-data' folder
        run: |
          bucket_name=luminex-application-files
          folder_key=temp-etl-data/
          if aws s3api head-object --bucket $bucket_name --key $folder_key 2>/dev/null; then
            echo "Folder $folder_key already exists."
          else
            echo "Folder $folder_key does not exist. Creating..."
            aws s3api put-object --bucket $bucket_name --key $folder_key
          fi
      
      - name: Validate Stack
        env:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}
          stack-name: ${{ github.event.client_payload.inputs.stack-name }}
        run: |
          # Mask AWS credentials in the logs
          echo "::add-mask::$aws-access-key-id"
          echo "::add-mask::$aws-secret-access-key"
          echo "::add-mask::$aws-session-token"
          echo $stack-name
          python luminex/validation/stack_name_validator.py
      
      - name: Deploy EMR cluster
        run: |
          stack_id=$(aws cloudformation create-stack \
            --stack-name ${{github.event.client_payload.inputs.stack-name}} \
            --template-body file://./infrastructure/create-emr-cft.yml \
            --parameters file://./infrastructure/config_parameter.json \
            --role-arn arn:aws:iam::355648722862:role/dish-dp-CICDAcctCodePipelineCloudFormationRole\
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            | jq -r '.StackId')
          echo "CloudFormation stack ID: $stack_id"
